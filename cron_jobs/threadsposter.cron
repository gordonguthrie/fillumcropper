#!/bin/sh

# Exit on error, treat unset variables as errors, and propagate pipe failures
set -e

# Base directory
BASE_DIR="/home/gordon/fillumcropper"

# Debug mode - set to TRUE to enable debug logging, FALSE to disable
DEBUG=FALSE

# Log directory and file
LOG_DIR="$BASE_DIR/logs"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/threads_posting.log"

# Debug logging function
debug_log() {
    if [ "$DEBUG" = "TRUE" ]; then
        echo "[DEBUG] $(date): $1" | tee -a "$LOG_FILE"
    fi
}

# Error logging function (always logs regardless of DEBUG setting)
error_log() {
    echo "[ERROR] $(date): $1" | tee -a "$LOG_FILE"
}

# Log API response function
log_response() {
    response_type="$1"
    response_data="$2"
    if [ "$DEBUG" = "TRUE" ]; then
        echo "===== $response_type RESPONSE $(date) =====" >> "$LOG_FILE"
        echo "$response_data" >> "$LOG_FILE"
        echo "=========================================" >> "$LOG_FILE"
    fi
}

# Log API error function (always logs regardless of DEBUG setting)
log_error_response() {
    response_type="$1"
    response_data="$2"
    error_message="$3"
    
    echo "===== $response_type ERROR $(date) =====" >> "$LOG_FILE"
    echo "Error: $error_message" >> "$LOG_FILE"
    echo "Response data:" >> "$LOG_FILE"
    echo "$response_data" >> "$LOG_FILE"
    echo "=========================================" >> "$LOG_FILE"
}

debug_log "Script started"

# Load Threads API credentials from environment file
CREDENTIALS_FILE="$BASE_DIR/.env.threads"
if [ ! -f "$CREDENTIALS_FILE" ]; then
    error_msg="Credentials file not found at $CREDENTIALS_FILE"
    error_log "$error_msg"
    exit 1
fi

# Source the credentials file
. "$CREDENTIALS_FILE"

# Check if credentials are properly loaded
if [ -z "$THREADS_IDENTIFIER" ] || [ -z "$THREADS_PASSWORD" ]; then
    error_msg="Threads credentials not properly set in $CREDENTIALS_FILE"
    error_log "$error_msg"
    exit 1
fi

debug_log "Using Threads account: $THREADS_IDENTIFIER"

# Ensure archive directory exists
mkdir -p "$BASE_DIR/output_queue_archive/threads"
debug_log "Ensured archive directory exists: $BASE_DIR/output_queue_archive/threads"

# Get current timestamp for comparison
CURRENT_TIMESTAMP=$(date +"%y_%m_%d_%H_%M_%S")
debug_log "Current timestamp: $CURRENT_TIMESTAMP"

# Process directories in timestamp order
debug_log "Searching for directories in $BASE_DIR/output_queue/threads/"
find "$BASE_DIR/output_queue/threads/" -mindepth 1 -maxdepth 1 -type d | sort | while read dir; do
    # Extract timestamp from directory name
    dir_timestamp=$(basename "$dir")
    debug_log "Processing directory: $dir (timestamp: $dir_timestamp)"
    
    # Skip if directory timestamp is in the future
    if [ "$dir_timestamp" \> "$CURRENT_TIMESTAMP" ]; then
        debug_log "Skipping future-dated directory: $dir"
        continue
    fi
    
    # Read metadata
    metadata_file="$dir/metadata.json"
    if [ ! -f "$metadata_file" ]; then
        error_msg="metadata.json not found in $dir"
        error_log "$error_msg"
        exit 1
    fi
    
    debug_log "Reading metadata from: $metadata_file"
    
    # Parse metadata
    image_filename=$(jq -r '.image' "$metadata_file")
    post_text=$(jq -r '.post' "$metadata_file")
    alt_text=$(jq -r '.altText' "$metadata_file")
    
    post_text_len=$(echo "$post_text" | wc -c)
    alt_text_len=$(echo "$alt_text" | wc -c)
    debug_log "Metadata parsed - Image: $image_filename, Post length: $post_text_len chars, Alt text length: $alt_text_len chars"
    
    # Check if image exists
    image_path="$dir/$image_filename"
    if [ ! -f "$image_path" ]; then
        error_msg="Image $image_filename not found in $dir"
        error_log "$error_msg"
        exit 1
    fi
    
    image_size_bytes=$(stat -c%s "$image_path")
    image_size_mb=$(awk "BEGIN {printf \"%.2f\", $image_size_bytes/1048576}")
    debug_log "Image details: $image_filename (Size: ${image_size_mb}MB, Raw bytes: $image_size_bytes)"
    debug_log "Loading image from full path: $image_path"
    
    # Here you would implement the Threads API posting logic
    # This is a placeholder for the actual Threads API integration
    debug_log "Would post to Threads with account: $THREADS_IDENTIFIER"
    debug_log "Image: $image_path"
    debug_log "Text: $post_text"
    debug_log "Alt text: $alt_text"
    
    # For demonstration purposes, let's assume the post was successful
    success_msg="Successfully posted to Threads: $dir"
    echo "$success_msg"
    debug_log "Post successful."
    
    # Move directory to archive
    archive_dir="$BASE_DIR/output_queue_archive/threads/$(basename "$dir")"
    debug_log "Moving directory to archive: $dir -> $archive_dir"
    mv "$dir" "$archive_dir"
    echo "Moved $dir to $archive_dir"
    debug_log "Directory successfully moved to archive"
    
    debug_log "Completed processing for directory: $dir"
done

debug_log "Script completed successfully"
